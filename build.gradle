plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.4'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'com.bmuschko.docker-spring-boot-application' version '9.3.3'
}

docker {
    springBootApplication {
        baseImage = 'openjdk:21-jdk-alpine'  // 기본 이미지 설정
        ports = [8080]                       // 도커 컨테이너의 포트 설정
    }
}

//tasks buildDockerImage(type: com.bmuschko.gradle.docker.tasks.image.DockerBuildImage) {
//    inputDir = file('.')  // Dockerfile이 있는 디렉터리 경로 설정 (보통 프로젝트 루트)  // Docker 이미지로 빌드할 파일 경로
//    tags = ['localhost:5000/spring-boot-api:latest']  // 로컬 레지스트리 태그 설정
//}
//
//task pushDockerImage(type: com.bmuschko.gradle.docker.tasks.image.DockerPushImage) {
//    dependsOn buildDockerImage
//    images.add('localhost:5000/spring-boot-api:latest')  // 로컬 레지스트리에 푸시할 이미지
//}

group = 'com.springboot'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    developmentOnly 'org.springframework.boot:spring-boot-docker-compose'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    //JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'  // JWT API
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'    // JWT 구현체
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5' // JSON 처리를 위한 Jackson 모듈
    compileOnly 'jakarta.servlet:jakarta.servlet-api:6.1.0'  // JWT 인증 관련 jakarta 추가
    //Swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'
}

tasks.named('test') {
    useJUnitPlatform()
}
